// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonFfcccb8aDecodeBackendServerAppApiModels(in *jlexer.Lexer, out *Card) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cid":
			out.CID = uint(in.Uint())
		case "bid":
			out.BID = uint(in.Uint())
		case "clid":
			out.CLID = uint(in.Uint())
		case "pos":
			out.PositionOnCardList = uint(in.Uint())
		case "card_name":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "deadline_check":
			out.DeadlineChecked = bool(in.Bool())
		case "deadline":
			out.Deadline = string(in.String())
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]Comment, 0, 0)
					} else {
						out.Comments = []Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Comment
					easyjsonFfcccb8aDecodeBackendServerAppApiModels1(in, &v1)
					out.Comments = append(out.Comments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "check_lists":
			if in.IsNull() {
				in.Skip()
				out.CheckLists = nil
			} else {
				in.Delim('[')
				if out.CheckLists == nil {
					if !in.IsDelim(']') {
						out.CheckLists = make([]CheckList, 0, 1)
					} else {
						out.CheckLists = []CheckList{}
					}
				} else {
					out.CheckLists = (out.CheckLists)[:0]
				}
				for !in.IsDelim(']') {
					var v2 CheckList
					easyjsonFfcccb8aDecodeBackendServerAppApiModels2(in, &v2)
					out.CheckLists = append(out.CheckLists, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "assignees":
			if in.IsNull() {
				in.Skip()
				out.Assignees = nil
			} else {
				in.Delim('[')
				if out.Assignees == nil {
					if !in.IsDelim(']') {
						out.Assignees = make([]PublicUserInfo, 0, 1)
					} else {
						out.Assignees = []PublicUserInfo{}
					}
				} else {
					out.Assignees = (out.Assignees)[:0]
				}
				for !in.IsDelim(']') {
					var v3 PublicUserInfo
					easyjsonFfcccb8aDecodeBackendServerAppApiModels3(in, &v3)
					out.Assignees = append(out.Assignees, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeBackendServerAppApiModels(out *jwriter.Writer, in Card) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CID))
	}
	{
		const prefix string = ",\"bid\":"
		out.RawString(prefix)
		out.Uint(uint(in.BID))
	}
	{
		const prefix string = ",\"clid\":"
		out.RawString(prefix)
		out.Uint(uint(in.CLID))
	}
	{
		const prefix string = ",\"pos\":"
		out.RawString(prefix)
		out.Uint(uint(in.PositionOnCardList))
	}
	{
		const prefix string = ",\"card_name\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"deadline_check\":"
		out.RawString(prefix)
		out.Bool(bool(in.DeadlineChecked))
	}
	{
		const prefix string = ",\"deadline\":"
		out.RawString(prefix)
		out.String(string(in.Deadline))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Comments {
				if v4 > 0 {
					out.RawByte(',')
				}
				easyjsonFfcccb8aEncodeBackendServerAppApiModels1(out, v5)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"check_lists\":"
		out.RawString(prefix)
		if in.CheckLists == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.CheckLists {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjsonFfcccb8aEncodeBackendServerAppApiModels2(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"assignees\":"
		out.RawString(prefix)
		if in.Assignees == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Assignees {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonFfcccb8aEncodeBackendServerAppApiModels3(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Card) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonFfcccb8aEncodeBackendServerAppApiModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Card) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonFfcccb8aEncodeBackendServerAppApiModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Card) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonFfcccb8aDecodeBackendServerAppApiModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Card) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonFfcccb8aDecodeBackendServerAppApiModels(l, v)
}
func easyjsonFfcccb8aDecodeBackendServerAppApiModels3(in *jlexer.Lexer, out *PublicUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = uint(in.Uint())
		case "userName":
			out.Login = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeBackendServerAppApiModels3(out *jwriter.Writer, in PublicUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.UID))
	}
	{
		const prefix string = ",\"userName\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}
func easyjsonFfcccb8aDecodeBackendServerAppApiModels2(in *jlexer.Lexer, out *CheckList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chlid":
			out.CHLID = uint(in.Uint())
		case "cid":
			out.CID = uint(in.Uint())
		case "title":
			out.Title = string(in.String())
		case "check_list_items":
			if in.IsNull() {
				in.Skip()
				out.CheckListItems = nil
			} else {
				in.Delim('[')
				if out.CheckListItems == nil {
					if !in.IsDelim(']') {
						out.CheckListItems = make([]CheckListItem, 0, 1)
					} else {
						out.CheckListItems = []CheckListItem{}
					}
				} else {
					out.CheckListItems = (out.CheckListItems)[:0]
				}
				for !in.IsDelim(']') {
					var v10 CheckListItem
					easyjsonFfcccb8aDecodeBackendServerAppApiModels4(in, &v10)
					out.CheckListItems = append(out.CheckListItems, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeBackendServerAppApiModels2(out *jwriter.Writer, in CheckList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chlid\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CHLID))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.Uint(uint(in.CID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"check_list_items\":"
		out.RawString(prefix)
		if in.CheckListItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.CheckListItems {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonFfcccb8aEncodeBackendServerAppApiModels4(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonFfcccb8aDecodeBackendServerAppApiModels4(in *jlexer.Lexer, out *CheckListItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chliid":
			out.CHLIID = uint(in.Uint())
		case "chlid":
			out.CHLID = uint(in.Uint())
		case "text":
			out.Text = string(in.String())
		case "status":
			out.Status = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeBackendServerAppApiModels4(out *jwriter.Writer, in CheckListItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"chliid\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CHLIID))
	}
	{
		const prefix string = ",\"chlid\":"
		out.RawString(prefix)
		out.Uint(uint(in.CHLID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.Bool(bool(in.Status))
	}
	out.RawByte('}')
}
func easyjsonFfcccb8aDecodeBackendServerAppApiModels1(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cmid":
			out.CMID = uint(in.Uint())
		case "cid":
			out.CID = uint(in.Uint())
		case "uid":
			out.UID = uint(in.Uint())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.DateParsed = string(in.String())
		case "user":
			easyjsonFfcccb8aDecodeBackendServerAppApiModels3(in, &out.User)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonFfcccb8aEncodeBackendServerAppApiModels1(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cmid\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.CMID))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.Uint(uint(in.CID))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.Uint(uint(in.UID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.String(string(in.DateParsed))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjsonFfcccb8aEncodeBackendServerAppApiModels3(out, in.User)
	}
	out.RawByte('}')
}
