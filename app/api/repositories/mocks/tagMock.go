// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTagRepository is a mock of TagRepository interface.
type MockTagRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTagRepositoryMockRecorder
}

// MockTagRepositoryMockRecorder is the mock recorder for MockTagRepository.
type MockTagRepositoryMockRecorder struct {
	mock *MockTagRepository
}

// NewMockTagRepository creates a new mock instance.
func NewMockTagRepository(ctrl *gomock.Controller) *MockTagRepository {
	mock := &MockTagRepository{ctrl: ctrl}
	mock.recorder = &MockTagRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagRepository) EXPECT() *MockTagRepositoryMockRecorder {
	return m.recorder
}

// AddTagToCard mocks base method.
func (m *MockTagRepository) AddTagToCard(uid, cid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTagToCard", uid, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTagToCard indicates an expected call of AddTagToCard.
func (mr *MockTagRepositoryMockRecorder) AddTagToCard(uid, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagToCard", reflect.TypeOf((*MockTagRepository)(nil).AddTagToCard), uid, cid)
}

// Create mocks base method.
func (m *MockTagRepository) Create(tag *models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTagRepositoryMockRecorder) Create(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTagRepository)(nil).Create), tag)
}

// Delete mocks base method.
func (m *MockTagRepository) Delete(tgid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tgid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTagRepositoryMockRecorder) Delete(tgid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTagRepository)(nil).Delete), tgid)
}

// GetByID mocks base method.
func (m *MockTagRepository) GetByID(tgid uint) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", tgid)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTagRepositoryMockRecorder) GetByID(tgid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTagRepository)(nil).GetByID), tgid)
}

// Update mocks base method.
func (m *MockTagRepository) Update(tag *models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTagRepositoryMockRecorder) Update(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTagRepository)(nil).Update), tag)
}
