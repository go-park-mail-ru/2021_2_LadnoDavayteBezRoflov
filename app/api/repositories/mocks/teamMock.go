// Code generated by MockGen. DO NOT EDIT.
// Source: team.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTeamRepository) Create(team *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", team)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTeamRepositoryMockRecorder) Create(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTeamRepository)(nil).Create), team)
}

// Delete mocks base method.
func (m *MockTeamRepository) Delete(tid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTeamRepositoryMockRecorder) Delete(tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTeamRepository)(nil).Delete), tid)
}

// GetByID mocks base method.
func (m *MockTeamRepository) GetByID(tid uint) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", tid)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTeamRepositoryMockRecorder) GetByID(tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTeamRepository)(nil).GetByID), tid)
}

// GetTeamBoards mocks base method.
func (m *MockTeamRepository) GetTeamBoards(tid uint) (*[]models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamBoards", tid)
	ret0, _ := ret[0].(*[]models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamBoards indicates an expected call of GetTeamBoards.
func (mr *MockTeamRepositoryMockRecorder) GetTeamBoards(tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamBoards", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamBoards), tid)
}

// GetTeamMembers mocks base method.
func (m *MockTeamRepository) GetTeamMembers(tid uint) (*[]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamMembers", tid)
	ret0, _ := ret[0].(*[]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamMembers indicates an expected call of GetTeamMembers.
func (mr *MockTeamRepositoryMockRecorder) GetTeamMembers(tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamMembers", reflect.TypeOf((*MockTeamRepository)(nil).GetTeamMembers), tid)
}

// IsTeamExist mocks base method.
func (m *MockTeamRepository) IsTeamExist(team *models.Team) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeamExist", team)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTeamExist indicates an expected call of IsTeamExist.
func (mr *MockTeamRepositoryMockRecorder) IsTeamExist(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeamExist", reflect.TypeOf((*MockTeamRepository)(nil).IsTeamExist), team)
}

// Update mocks base method.
func (m *MockTeamRepository) Update(team *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", team)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTeamRepositoryMockRecorder) Update(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTeamRepository)(nil).Update), team)
}
