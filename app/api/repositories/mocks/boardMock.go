// Code generated by MockGen. DO NOT EDIT.
// Source: board.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBoardRepository is a mock of BoardRepository interface.
type MockBoardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBoardRepositoryMockRecorder
}

// MockBoardRepositoryMockRecorder is the mock recorder for MockBoardRepository.
type MockBoardRepositoryMockRecorder struct {
	mock *MockBoardRepository
}

// NewMockBoardRepository creates a new mock instance.
func NewMockBoardRepository(ctrl *gomock.Controller) *MockBoardRepository {
	mock := &MockBoardRepository{ctrl: ctrl}
	mock.recorder = &MockBoardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBoardRepository) EXPECT() *MockBoardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBoardRepository) Create(board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBoardRepositoryMockRecorder) Create(board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBoardRepository)(nil).Create), board)
}

// Delete mocks base method.
func (m *MockBoardRepository) Delete(bid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBoardRepositoryMockRecorder) Delete(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBoardRepository)(nil).Delete), bid)
}

// FindBoardIDByPath mocks base method.
func (m *MockBoardRepository) FindBoardIDByPath(accessPath string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBoardIDByPath", accessPath)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBoardIDByPath indicates an expected call of FindBoardIDByPath.
func (mr *MockBoardRepositoryMockRecorder) FindBoardIDByPath(accessPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBoardIDByPath", reflect.TypeOf((*MockBoardRepository)(nil).FindBoardIDByPath), accessPath)
}

// GetBoardCardLists mocks base method.
func (m *MockBoardRepository) GetBoardCardLists(bid uint) (*[]models.CardList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardCardLists", bid)
	ret0, _ := ret[0].(*[]models.CardList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardCardLists indicates an expected call of GetBoardCardLists.
func (mr *MockBoardRepositoryMockRecorder) GetBoardCardLists(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardCardLists", reflect.TypeOf((*MockBoardRepository)(nil).GetBoardCardLists), bid)
}

// GetBoardCards mocks base method.
func (m *MockBoardRepository) GetBoardCards(bid uint) (*[]models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardCards", bid)
	ret0, _ := ret[0].(*[]models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardCards indicates an expected call of GetBoardCards.
func (mr *MockBoardRepositoryMockRecorder) GetBoardCards(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardCards", reflect.TypeOf((*MockBoardRepository)(nil).GetBoardCards), bid)
}

// GetBoardInvitedMembers mocks base method.
func (m *MockBoardRepository) GetBoardInvitedMembers(bid uint) (*[]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardInvitedMembers", bid)
	ret0, _ := ret[0].(*[]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardInvitedMembers indicates an expected call of GetBoardInvitedMembers.
func (mr *MockBoardRepositoryMockRecorder) GetBoardInvitedMembers(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardInvitedMembers", reflect.TypeOf((*MockBoardRepository)(nil).GetBoardInvitedMembers), bid)
}

// GetBoardMembers mocks base method.
func (m *MockBoardRepository) GetBoardMembers(board *models.Board) (*[]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoardMembers", board)
	ret0, _ := ret[0].(*[]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBoardMembers indicates an expected call of GetBoardMembers.
func (mr *MockBoardRepositoryMockRecorder) GetBoardMembers(board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoardMembers", reflect.TypeOf((*MockBoardRepository)(nil).GetBoardMembers), board)
}

// GetByID mocks base method.
func (m *MockBoardRepository) GetByID(bid uint) (*models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", bid)
	ret0, _ := ret[0].(*models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockBoardRepositoryMockRecorder) GetByID(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockBoardRepository)(nil).GetByID), bid)
}

// Update mocks base method.
func (m *MockBoardRepository) Update(board *models.Board) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", board)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBoardRepositoryMockRecorder) Update(board interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBoardRepository)(nil).Update), board)
}

// UpdateAccessPath mocks base method.
func (m *MockBoardRepository) UpdateAccessPath(bid uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessPath", bid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessPath indicates an expected call of UpdateAccessPath.
func (mr *MockBoardRepositoryMockRecorder) UpdateAccessPath(bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessPath", reflect.TypeOf((*MockBoardRepository)(nil).UpdateAccessPath), bid)
}
