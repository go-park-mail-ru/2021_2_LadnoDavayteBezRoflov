// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUserToBoard mocks base method.
func (m *MockUserRepository) AddUserToBoard(uid, bid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToBoard", uid, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToBoard indicates an expected call of AddUserToBoard.
func (mr *MockUserRepositoryMockRecorder) AddUserToBoard(uid, bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToBoard", reflect.TypeOf((*MockUserRepository)(nil).AddUserToBoard), uid, bid)
}

// AddUserToCard mocks base method.
func (m *MockUserRepository) AddUserToCard(uid, cid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToCard", uid, cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToCard indicates an expected call of AddUserToCard.
func (mr *MockUserRepositoryMockRecorder) AddUserToCard(uid, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToCard", reflect.TypeOf((*MockUserRepository)(nil).AddUserToCard), uid, cid)
}

// AddUserToTeam mocks base method.
func (m *MockUserRepository) AddUserToTeam(uid, tid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToTeam", uid, tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToTeam indicates an expected call of AddUserToTeam.
func (mr *MockUserRepositoryMockRecorder) AddUserToTeam(uid, tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToTeam", reflect.TypeOf((*MockUserRepository)(nil).AddUserToTeam), uid, tid)
}

// Create mocks base method.
func (m *MockUserRepository) Create(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), user)
}

// FindAllByLogin mocks base method.
func (m *MockUserRepository) FindAllByLogin(text string, amount int) (*[]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllByLogin", text, amount)
	ret0, _ := ret[0].(*[]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllByLogin indicates an expected call of FindAllByLogin.
func (mr *MockUserRepositoryMockRecorder) FindAllByLogin(text, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllByLogin", reflect.TypeOf((*MockUserRepository)(nil).FindAllByLogin), text, amount)
}

// FindBoardMembersByLogin mocks base method.
func (m *MockUserRepository) FindBoardMembersByLogin(bid uint, text string, amount int) (*[]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBoardMembersByLogin", bid, text, amount)
	ret0, _ := ret[0].(*[]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBoardMembersByLogin indicates an expected call of FindBoardMembersByLogin.
func (mr *MockUserRepositoryMockRecorder) FindBoardMembersByLogin(bid, text, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBoardMembersByLogin", reflect.TypeOf((*MockUserRepository)(nil).FindBoardMembersByLogin), bid, text, amount)
}

// GetByID mocks base method.
func (m *MockUserRepository) GetByID(uid uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", uid)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUserRepositoryMockRecorder) GetByID(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUserRepository)(nil).GetByID), uid)
}

// GetByLogin mocks base method.
func (m *MockUserRepository) GetByLogin(login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockUserRepositoryMockRecorder) GetByLogin(login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockUserRepository)(nil).GetByLogin), login)
}

// GetPublicData mocks base method.
func (m *MockUserRepository) GetPublicData(uid uint) (*models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicData", uid)
	ret0, _ := ret[0].(*models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicData indicates an expected call of GetPublicData.
func (mr *MockUserRepositoryMockRecorder) GetPublicData(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicData", reflect.TypeOf((*MockUserRepository)(nil).GetPublicData), uid)
}

// GetUserTeams mocks base method.
func (m *MockUserRepository) GetUserTeams(uid uint) (*[]models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTeams", uid)
	ret0, _ := ret[0].(*[]models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTeams indicates an expected call of GetUserTeams.
func (mr *MockUserRepositoryMockRecorder) GetUserTeams(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTeams", reflect.TypeOf((*MockUserRepository)(nil).GetUserTeams), uid)
}

// GetUserToggledBoards mocks base method.
func (m *MockUserRepository) GetUserToggledBoards(uid uint) (*[]models.Board, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToggledBoards", uid)
	ret0, _ := ret[0].(*[]models.Board)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToggledBoards indicates an expected call of GetUserToggledBoards.
func (mr *MockUserRepositoryMockRecorder) GetUserToggledBoards(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToggledBoards", reflect.TypeOf((*MockUserRepository)(nil).GetUserToggledBoards), uid)
}

// IsBoardAccessed mocks base method.
func (m *MockUserRepository) IsBoardAccessed(uid, bid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBoardAccessed", uid, bid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBoardAccessed indicates an expected call of IsBoardAccessed.
func (mr *MockUserRepositoryMockRecorder) IsBoardAccessed(uid, bid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBoardAccessed", reflect.TypeOf((*MockUserRepository)(nil).IsBoardAccessed), uid, bid)
}

// IsCardAccessed mocks base method.
func (m *MockUserRepository) IsCardAccessed(uid, cid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCardAccessed", uid, cid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCardAccessed indicates an expected call of IsCardAccessed.
func (mr *MockUserRepositoryMockRecorder) IsCardAccessed(uid, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCardAccessed", reflect.TypeOf((*MockUserRepository)(nil).IsCardAccessed), uid, cid)
}

// IsCardAssigned mocks base method.
func (m *MockUserRepository) IsCardAssigned(uid, cid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCardAssigned", uid, cid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCardAssigned indicates an expected call of IsCardAssigned.
func (mr *MockUserRepositoryMockRecorder) IsCardAssigned(uid, cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCardAssigned", reflect.TypeOf((*MockUserRepository)(nil).IsCardAssigned), uid, cid)
}

// IsCardListAccessed mocks base method.
func (m *MockUserRepository) IsCardListAccessed(uid, clid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCardListAccessed", uid, clid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCardListAccessed indicates an expected call of IsCardListAccessed.
func (mr *MockUserRepositoryMockRecorder) IsCardListAccessed(uid, clid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCardListAccessed", reflect.TypeOf((*MockUserRepository)(nil).IsCardListAccessed), uid, clid)
}

// IsCheckListAccessed mocks base method.
func (m *MockUserRepository) IsCheckListAccessed(uid, chlid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCheckListAccessed", uid, chlid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCheckListAccessed indicates an expected call of IsCheckListAccessed.
func (mr *MockUserRepositoryMockRecorder) IsCheckListAccessed(uid, chlid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCheckListAccessed", reflect.TypeOf((*MockUserRepository)(nil).IsCheckListAccessed), uid, chlid)
}

// IsCheckListItemAccessed mocks base method.
func (m *MockUserRepository) IsCheckListItemAccessed(uid, chliid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCheckListItemAccessed", uid, chliid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCheckListItemAccessed indicates an expected call of IsCheckListItemAccessed.
func (mr *MockUserRepositoryMockRecorder) IsCheckListItemAccessed(uid, chliid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCheckListItemAccessed", reflect.TypeOf((*MockUserRepository)(nil).IsCheckListItemAccessed), uid, chliid)
}

// IsCommentAccessed mocks base method.
func (m *MockUserRepository) IsCommentAccessed(uid, cmid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCommentAccessed", uid, cmid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCommentAccessed indicates an expected call of IsCommentAccessed.
func (mr *MockUserRepositoryMockRecorder) IsCommentAccessed(uid, cmid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCommentAccessed", reflect.TypeOf((*MockUserRepository)(nil).IsCommentAccessed), uid, cmid)
}

// IsEmailUsed mocks base method.
func (m *MockUserRepository) IsEmailUsed(user *models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEmailUsed", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEmailUsed indicates an expected call of IsEmailUsed.
func (mr *MockUserRepositoryMockRecorder) IsEmailUsed(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEmailUsed", reflect.TypeOf((*MockUserRepository)(nil).IsEmailUsed), user)
}

// IsUserExist mocks base method.
func (m *MockUserRepository) IsUserExist(user *models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockUserRepositoryMockRecorder) IsUserExist(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockUserRepository)(nil).IsUserExist), user)
}

// IsUserInTeam mocks base method.
func (m *MockUserRepository) IsUserInTeam(uid, tid uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserInTeam", uid, tid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserInTeam indicates an expected call of IsUserInTeam.
func (mr *MockUserRepositoryMockRecorder) IsUserInTeam(uid, tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserInTeam", reflect.TypeOf((*MockUserRepository)(nil).IsUserInTeam), uid, tid)
}

// Update mocks base method.
func (m *MockUserRepository) Update(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), user)
}

// UpdateAvatar mocks base method.
func (m *MockUserRepository) UpdateAvatar(user *models.User, avatar *multipart.FileHeader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", user, avatar)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvatar indicates an expected call of UpdateAvatar.
func (mr *MockUserRepositoryMockRecorder) UpdateAvatar(user, avatar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockUserRepository)(nil).UpdateAvatar), user, avatar)
}
