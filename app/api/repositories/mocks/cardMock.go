// Code generated by MockGen. DO NOT EDIT.
// Source: card.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCardRepository is a mock of CardRepository interface.
type MockCardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCardRepositoryMockRecorder
}

// MockCardRepositoryMockRecorder is the mock recorder for MockCardRepository.
type MockCardRepositoryMockRecorder struct {
	mock *MockCardRepository
}

// NewMockCardRepository creates a new mock instance.
func NewMockCardRepository(ctrl *gomock.Controller) *MockCardRepository {
	mock := &MockCardRepository{ctrl: ctrl}
	mock.recorder = &MockCardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCardRepository) EXPECT() *MockCardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCardRepository) Create(card *models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCardRepositoryMockRecorder) Create(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCardRepository)(nil).Create), card)
}

// Delete mocks base method.
func (m *MockCardRepository) Delete(cid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", cid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCardRepositoryMockRecorder) Delete(cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCardRepository)(nil).Delete), cid)
}

// GetAssignedUsers mocks base method.
func (m *MockCardRepository) GetAssignedUsers(cid uint) (*[]models.PublicUserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignedUsers", cid)
	ret0, _ := ret[0].(*[]models.PublicUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignedUsers indicates an expected call of GetAssignedUsers.
func (mr *MockCardRepositoryMockRecorder) GetAssignedUsers(cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignedUsers", reflect.TypeOf((*MockCardRepository)(nil).GetAssignedUsers), cid)
}

// GetByID mocks base method.
func (m *MockCardRepository) GetByID(cid uint) (*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", cid)
	ret0, _ := ret[0].(*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCardRepositoryMockRecorder) GetByID(cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCardRepository)(nil).GetByID), cid)
}

// GetCardCheckLists mocks base method.
func (m *MockCardRepository) GetCardCheckLists(cid uint) (*[]models.CheckList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardCheckLists", cid)
	ret0, _ := ret[0].(*[]models.CheckList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardCheckLists indicates an expected call of GetCardCheckLists.
func (mr *MockCardRepositoryMockRecorder) GetCardCheckLists(cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardCheckLists", reflect.TypeOf((*MockCardRepository)(nil).GetCardCheckLists), cid)
}

// GetCardComments mocks base method.
func (m *MockCardRepository) GetCardComments(cid uint) (*[]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardComments", cid)
	ret0, _ := ret[0].(*[]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardComments indicates an expected call of GetCardComments.
func (mr *MockCardRepositoryMockRecorder) GetCardComments(cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardComments", reflect.TypeOf((*MockCardRepository)(nil).GetCardComments), cid)
}

// GetCardTags mocks base method.
func (m *MockCardRepository) GetCardTags(cid uint) (*[]models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardTags", cid)
	ret0, _ := ret[0].(*[]models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardTags indicates an expected call of GetCardTags.
func (mr *MockCardRepositoryMockRecorder) GetCardTags(cid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardTags", reflect.TypeOf((*MockCardRepository)(nil).GetCardTags), cid)
}

// Move mocks base method.
func (m *MockCardRepository) Move(fromPos, toPos, fromCardListID, toCardListID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", fromPos, toPos, fromCardListID, toCardListID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockCardRepositoryMockRecorder) Move(fromPos, toPos, fromCardListID, toCardListID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockCardRepository)(nil).Move), fromPos, toPos, fromCardListID, toCardListID)
}

// Update mocks base method.
func (m *MockCardRepository) Update(card *models.Card) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", card)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCardRepositoryMockRecorder) Update(card interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCardRepository)(nil).Update), card)
}
