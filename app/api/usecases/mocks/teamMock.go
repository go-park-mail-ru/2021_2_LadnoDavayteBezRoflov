// Code generated by MockGen. DO NOT EDIT.
// Source: team.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTeamUseCase is a mock of TeamUseCase interface.
type MockTeamUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTeamUseCaseMockRecorder
}

// MockTeamUseCaseMockRecorder is the mock recorder for MockTeamUseCase.
type MockTeamUseCaseMockRecorder struct {
	mock *MockTeamUseCase
}

// NewMockTeamUseCase creates a new mock instance.
func NewMockTeamUseCase(ctrl *gomock.Controller) *MockTeamUseCase {
	mock := &MockTeamUseCase{ctrl: ctrl}
	mock.recorder = &MockTeamUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamUseCase) EXPECT() *MockTeamUseCaseMockRecorder {
	return m.recorder
}

// CreateTeam mocks base method.
func (m *MockTeamUseCase) CreateTeam(uid uint, team *models.Team) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", uid, team)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockTeamUseCaseMockRecorder) CreateTeam(uid, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockTeamUseCase)(nil).CreateTeam), uid, team)
}

// DeleteTeam mocks base method.
func (m *MockTeamUseCase) DeleteTeam(uid, tid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTeam", uid, tid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTeam indicates an expected call of DeleteTeam.
func (mr *MockTeamUseCaseMockRecorder) DeleteTeam(uid, tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTeam", reflect.TypeOf((*MockTeamUseCase)(nil).DeleteTeam), uid, tid)
}

// GetTeam mocks base method.
func (m *MockTeamUseCase) GetTeam(uid, tid uint) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", uid, tid)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamUseCaseMockRecorder) GetTeam(uid, tid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamUseCase)(nil).GetTeam), uid, tid)
}

// ToggleUser mocks base method.
func (m *MockTeamUseCase) ToggleUser(uid, tid, toggledUserID uint) (*models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleUser", uid, tid, toggledUserID)
	ret0, _ := ret[0].(*models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleUser indicates an expected call of ToggleUser.
func (mr *MockTeamUseCaseMockRecorder) ToggleUser(uid, tid, toggledUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleUser", reflect.TypeOf((*MockTeamUseCase)(nil).ToggleUser), uid, tid, toggledUserID)
}

// UpdateTeam mocks base method.
func (m *MockTeamUseCase) UpdateTeam(uid uint, team *models.Team) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeam", uid, team)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeam indicates an expected call of UpdateTeam.
func (mr *MockTeamUseCaseMockRecorder) UpdateTeam(uid, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeam", reflect.TypeOf((*MockTeamUseCase)(nil).UpdateTeam), uid, team)
}
