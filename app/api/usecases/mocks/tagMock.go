// Code generated by MockGen. DO NOT EDIT.
// Source: tag.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTagUseCase is a mock of TagUseCase interface.
type MockTagUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockTagUseCaseMockRecorder
}

// MockTagUseCaseMockRecorder is the mock recorder for MockTagUseCase.
type MockTagUseCaseMockRecorder struct {
	mock *MockTagUseCase
}

// NewMockTagUseCase creates a new mock instance.
func NewMockTagUseCase(ctrl *gomock.Controller) *MockTagUseCase {
	mock := &MockTagUseCase{ctrl: ctrl}
	mock.recorder = &MockTagUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagUseCase) EXPECT() *MockTagUseCaseMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockTagUseCase) CreateTag(tag *models.Tag) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", tag)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockTagUseCaseMockRecorder) CreateTag(tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockTagUseCase)(nil).CreateTag), tag)
}

// DeleteTag mocks base method.
func (m *MockTagUseCase) DeleteTag(uid, tgid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", uid, tgid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockTagUseCaseMockRecorder) DeleteTag(uid, tgid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockTagUseCase)(nil).DeleteTag), uid, tgid)
}

// GetTag mocks base method.
func (m *MockTagUseCase) GetTag(uid, tgid uint) (*models.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", uid, tgid)
	ret0, _ := ret[0].(*models.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagUseCaseMockRecorder) GetTag(uid, tgid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagUseCase)(nil).GetTag), uid, tgid)
}

// UpdateTag mocks base method.
func (m *MockTagUseCase) UpdateTag(uid uint, tag *models.Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", uid, tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagUseCaseMockRecorder) UpdateTag(uid, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagUseCase)(nil).UpdateTag), uid, tag)
}
