// Code generated by MockGen. DO NOT EDIT.
// Source: checkList.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckListUseCase is a mock of CheckListUseCase interface.
type MockCheckListUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCheckListUseCaseMockRecorder
}

// MockCheckListUseCaseMockRecorder is the mock recorder for MockCheckListUseCase.
type MockCheckListUseCaseMockRecorder struct {
	mock *MockCheckListUseCase
}

// NewMockCheckListUseCase creates a new mock instance.
func NewMockCheckListUseCase(ctrl *gomock.Controller) *MockCheckListUseCase {
	mock := &MockCheckListUseCase{ctrl: ctrl}
	mock.recorder = &MockCheckListUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckListUseCase) EXPECT() *MockCheckListUseCaseMockRecorder {
	return m.recorder
}

// CreateCheckList mocks base method.
func (m *MockCheckListUseCase) CreateCheckList(checkList *models.CheckList) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckList", checkList)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckList indicates an expected call of CreateCheckList.
func (mr *MockCheckListUseCaseMockRecorder) CreateCheckList(checkList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).CreateCheckList), checkList)
}

// DeleteCheckList mocks base method.
func (m *MockCheckListUseCase) DeleteCheckList(uid, chlid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCheckList", uid, chlid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCheckList indicates an expected call of DeleteCheckList.
func (mr *MockCheckListUseCaseMockRecorder) DeleteCheckList(uid, chlid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).DeleteCheckList), uid, chlid)
}

// GetCheckList mocks base method.
func (m *MockCheckListUseCase) GetCheckList(uid, chlid uint) (*models.CheckList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckList", uid, chlid)
	ret0, _ := ret[0].(*models.CheckList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckList indicates an expected call of GetCheckList.
func (mr *MockCheckListUseCaseMockRecorder) GetCheckList(uid, chlid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).GetCheckList), uid, chlid)
}

// UpdateCheckList mocks base method.
func (m *MockCheckListUseCase) UpdateCheckList(uid uint, checkList *models.CheckList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckList", uid, checkList)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCheckList indicates an expected call of UpdateCheckList.
func (mr *MockCheckListUseCaseMockRecorder) UpdateCheckList(uid, checkList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckList", reflect.TypeOf((*MockCheckListUseCase)(nil).UpdateCheckList), uid, checkList)
}
