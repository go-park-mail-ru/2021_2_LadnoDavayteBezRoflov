// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommentUseCase is a mock of CommentUseCase interface.
type MockCommentUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentUseCaseMockRecorder
}

// MockCommentUseCaseMockRecorder is the mock recorder for MockCommentUseCase.
type MockCommentUseCaseMockRecorder struct {
	mock *MockCommentUseCase
}

// NewMockCommentUseCase creates a new mock instance.
func NewMockCommentUseCase(ctrl *gomock.Controller) *MockCommentUseCase {
	mock := &MockCommentUseCase{ctrl: ctrl}
	mock.recorder = &MockCommentUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentUseCase) EXPECT() *MockCommentUseCaseMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentUseCase) CreateComment(comment *models.Comment) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentUseCaseMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentUseCase)(nil).CreateComment), comment)
}

// DeleteComment mocks base method.
func (m *MockCommentUseCase) DeleteComment(uid, cmid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", uid, cmid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentUseCaseMockRecorder) DeleteComment(uid, cmid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentUseCase)(nil).DeleteComment), uid, cmid)
}

// GetComment mocks base method.
func (m *MockCommentUseCase) GetComment(uid, cmid uint) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", uid, cmid)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment.
func (mr *MockCommentUseCaseMockRecorder) GetComment(uid, cmid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockCommentUseCase)(nil).GetComment), uid, cmid)
}

// UpdateComment mocks base method.
func (m *MockCommentUseCase) UpdateComment(uid uint, comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", uid, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentUseCaseMockRecorder) UpdateComment(uid, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockCommentUseCase)(nil).UpdateComment), uid, comment)
}
