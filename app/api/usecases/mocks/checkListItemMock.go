// Code generated by MockGen. DO NOT EDIT.
// Source: checkListItem.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "backendServer/app/api/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckListItemUseCase is a mock of CheckListItemUseCase interface.
type MockCheckListItemUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCheckListItemUseCaseMockRecorder
}

// MockCheckListItemUseCaseMockRecorder is the mock recorder for MockCheckListItemUseCase.
type MockCheckListItemUseCaseMockRecorder struct {
	mock *MockCheckListItemUseCase
}

// NewMockCheckListItemUseCase creates a new mock instance.
func NewMockCheckListItemUseCase(ctrl *gomock.Controller) *MockCheckListItemUseCase {
	mock := &MockCheckListItemUseCase{ctrl: ctrl}
	mock.recorder = &MockCheckListItemUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckListItemUseCase) EXPECT() *MockCheckListItemUseCaseMockRecorder {
	return m.recorder
}

// CreateCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) CreateCheckListItem(checkListItem *models.CheckListItem) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCheckListItem", checkListItem)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCheckListItem indicates an expected call of CreateCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) CreateCheckListItem(checkListItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).CreateCheckListItem), checkListItem)
}

// DeleteCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) DeleteCheckListItem(uid, chliid uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCheckListItem", uid, chliid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCheckListItem indicates an expected call of DeleteCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) DeleteCheckListItem(uid, chliid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).DeleteCheckListItem), uid, chliid)
}

// GetCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) GetCheckListItem(uid, chliid uint) (*models.CheckListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckListItem", uid, chliid)
	ret0, _ := ret[0].(*models.CheckListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckListItem indicates an expected call of GetCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) GetCheckListItem(uid, chliid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).GetCheckListItem), uid, chliid)
}

// UpdateCheckListItem mocks base method.
func (m *MockCheckListItemUseCase) UpdateCheckListItem(uid uint, checkListItem *models.CheckListItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCheckListItem", uid, checkListItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCheckListItem indicates an expected call of UpdateCheckListItem.
func (mr *MockCheckListItemUseCaseMockRecorder) UpdateCheckListItem(uid, checkListItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCheckListItem", reflect.TypeOf((*MockCheckListItemUseCase)(nil).UpdateCheckListItem), uid, checkListItem)
}
